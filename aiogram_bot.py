import asyncio
import random
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, F, types, Router
from aiogram.filters import Command
from aiogram.types import ChatPermissions

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = "7809092146:AAHt5mOUHHyl2Vzt1MI1UdA8nR6fU7iG3_U"
warns = {}
ranks = {}  # –§–æ—Ä–º–∞—Ç: {chat_id: {user_id: —Ä–∞–Ω–≥}}
RANK_PRIORITY = {
    "User": 10,
    "–ú–æ–¥–µ—Ä": 30,
    "–ö—Ä—É—Ç–µ–Ω—å–∫–∏–π": 50,
    "–°–æ–∑–¥–∞—Ç–µ–ª—å": 80,
    "–í—ã—Å—à–∏–π —Å–æ–∑–¥–∞—Ç–µ–ª—å": 100
}

bot = Bot(token=TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Ç–æ–≤
with open("bad_words.txt", encoding="utf-8") as f:
    bad_words = set(word.strip().lower() for word in f if word.strip())

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ–º–æ—á–∏–π
def can_manage(executor_rank, target_rank):
    return RANK_PRIORITY.get(executor_rank, 0) > RANK_PRIORITY.get(target_rank, 0)

def get_rank(chat_id, user_id):
    return ranks.get(chat_id, {}).get(user_id, "User")

def set_rank(chat_id, user_id, rank):
    if chat_id not in ranks:
        ranks[chat_id] = {}
    ranks[chat_id][user_id] = rank

# –ù–∞–∑–Ω–∞—á–∞–µ–º –í—ã—Å—à–µ–≥–æ –°–æ–∑–¥–∞—Ç–µ–ª—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
@router.message()
async def auto_assign(message: types.Message):
    if message.chat.type in ["group", "supergroup"]:
        if message.chat.id not in ranks:
            ranks[message.chat.id] = {}
            ranks[message.chat.id][message.from_user.id] = "–í—ã—Å—à–∏–π —Å–æ–∑–¥–∞—Ç–µ–ª—å"

# –ö–æ–º–∞–Ω–¥—ã
@router.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.reply("–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω. –í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")

@router.message(Command("help"))
async def cmd_help(message: types.Message):
    await message.reply("‚öôÔ∏è –ö–æ–º–∞–Ω–¥—ã: /ban /unban /mute /unmute /warn /unwarn /kick /up /down\nüéÆ –ò–≥—Ä—ã: !–¥—É—ç–ª—å, !–∫—Ç–æ–∫—Ç–æ")

@router.message(Command("warn"))
async def cmd_warn(message: types.Message):
    if message.reply_to_message:
        chat_id = message.chat.id
        executor = message.from_user.id
        target = message.reply_to_message.from_user.id

        executor_rank = get_rank(chat_id, executor)
        target_rank = get_rank(chat_id, target)

        if not can_manage(executor_rank, target_rank):
            return await message.reply("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–¥–∞—á–∏ –≤–∞—Ä–Ω–∞.")

        warns[target] = warns.get(target, 0) + 1
        await message.reply(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ {warns[target]} –¥–ª—è {message.reply_to_message.from_user.first_name}")
        if warns[target] >= 3:
            warns[target] = 0
            await bot.restrict_chat_member(
                chat_id,
                target,
                permissions=ChatPermissions(can_send_messages=False),
                until_date=datetime.now() + timedelta(minutes=30)
            )
            await message.reply(f"‚è∞ {message.reply_to_message.from_user.first_name} –∑–∞–º—å—é—á–µ–Ω –Ω–∞ 30 –º–∏–Ω—É—Ç –∑–∞ 3 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è.")

@router.message(Command("unwarn"))
async def cmd_unwarn(message: types.Message):
    if message.reply_to_message:
        target = message.reply_to_message.from_user.id
        warns[target] = max(0, warns.get(target, 0) - 1)
        await message.reply(f"‚ÑπÔ∏è –°–Ω—è—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ. –¢–µ–∫—É—â–µ–µ: {warns[target]}")

@router.message(Command("ban"))
async def cmd_ban(message: types.Message):
    if message.reply_to_message:
        chat_id = message.chat.id
        executor = message.from_user.id
        target = message.reply_to_message.from_user.id

        executor_rank = get_rank(chat_id, executor)
        target_rank = get_rank(chat_id, target)

        if not can_manage(executor_rank, target_rank):
            return await message.reply("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –±–∞–Ω–∞.")

        await bot.ban_chat_member(chat_id, target)
        await message.reply("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω.")

@router.message(Command("unban"))
async def cmd_unban(message: types.Message):
    if message.reply_to_message:
        user_id = message.reply_to_message.from_user.id
        await bot.unban_chat_member(message.chat.id, user_id)
        await message.reply("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–∞–Ω–µ–Ω.")

@router.message(Command("mute"))
async def cmd_mute(message: types.Message):
    if message.reply_to_message:
        chat_id = message.chat.id
        executor = message.from_user.id
        target = message.reply_to_message.from_user.id

        executor_rank = get_rank(chat_id, executor)
        target_rank = get_rank(chat_id, target)

        if not can_manage(executor_rank, target_rank):
            return await message.reply("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –º—É—Ç–∞.")

        await bot.restrict_chat_member(
            chat_id,
            target,
            permissions=ChatPermissions(can_send_messages=False),
            until_date=datetime.now() + timedelta(minutes=30)
        )
        await message.reply("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–º—å—é—á–µ–Ω –Ω–∞ 30 –º–∏–Ω—É—Ç.")

@router.message(Command("unmute"))
async def cmd_unmute(message: types.Message):
    if message.reply_to_message:
        user_id = message.reply_to_message.from_user.id
        await bot.restrict_chat_member(
            message.chat.id,
            user_id,
            permissions=ChatPermissions(
                can_send_messages=True,
                can_send_media_messages=True,
                can_send_other_messages=True,
                can_add_web_page_previews=True
            )
        )
        await message.reply("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–º—å—é—á–µ–Ω.")

@router.message(Command("kick"))
async def cmd_kick(message: types.Message):
    if message.reply_to_message:
        chat_id = message.chat.id
        executor = message.from_user.id
        target = message.reply_to_message.from_user.id

        executor_rank = get_rank(chat_id, executor)
        target_rank = get_rank(chat_id, target)

        if not can_manage(executor_rank, target_rank):
            return await message.reply("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∫–∏–∫–∞.")

        await bot.ban_chat_member(chat_id, target)
        await bot.unban_chat_member(chat_id, target)
        await message.reply("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–∏–∫–Ω—É—Ç.")

@router.message(Command("up"))
async def cmd_up(message: types.Message):
    if message.reply_to_message:
        chat_id = message.chat.id
        executor = message.from_user.id
        target = message.reply_to_message.from_user.id

        if get_rank(chat_id, executor) not in ["–°–æ–∑–¥–∞—Ç–µ–ª—å", "–í—ã—Å—à–∏–π —Å–æ–∑–¥–∞—Ç–µ–ª—å"]:
            return await message.reply("‚ùå –¢–æ–ª—å–∫–æ –°–æ–∑–¥–∞—Ç–µ–ª—å –∏–ª–∏ –í—ã—Å—à–∏–π –°–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø–æ–≤—ã—à–∞—Ç—å.")

        target_rank = get_rank(chat_id, target)

        next_rank = {
            "User": "–ú–æ–¥–µ—Ä",
            "–ú–æ–¥–µ—Ä": "–ö—Ä—É—Ç–µ–Ω—å–∫–∏–π",
            "–ö—Ä—É—Ç–µ–Ω—å–∫–∏–π": "–°–æ–∑–¥–∞—Ç–µ–ª—å"
        }.get(target_rank)

        if next_rank:
            set_rank(chat_id, target, next_rank)
            await message.reply(f"‚úÖ –ü–æ–≤—ã—à–µ–Ω –¥–æ {next_rank}.")
        else:
            await message.reply("‚ùå –ù–µ–ª—å–∑—è –ø–æ–≤—ã—Å–∏—Ç—å.")

@router.message(Command("down"))
async def cmd_down(message: types.Message):
    if message.reply_to_message:
        chat_id = message.chat.id
        executor = message.from_user.id
        target = message.reply_to_message.from_user.id

        if get_rank(chat_id, executor) not in ["–°–æ–∑–¥–∞—Ç–µ–ª—å", "–í—ã—Å—à–∏–π —Å–æ–∑–¥–∞—Ç–µ–ª—å"]:
            return await message.reply("‚ùå –¢–æ–ª—å–∫–æ –°–æ–∑–¥–∞—Ç–µ–ª—å –∏–ª–∏ –í—ã—Å—à–∏–π –°–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø–æ–Ω–∏–∂–∞—Ç—å.")

        target_rank = get_rank(chat_id, target)

        prev_rank = {
            "–°–æ–∑–¥–∞—Ç–µ–ª—å": "–ö—Ä—É—Ç–µ–Ω—å–∫–∏–π",
            "–ö—Ä—É—Ç–µ–Ω—å–∫–∏–π": "–ú–æ–¥–µ—Ä",
            "–ú–æ–¥–µ—Ä": "User"
        }.get(target_rank)

        if prev_rank:
            set_rank(chat_id, target, prev_rank)
            await message.reply(f"‚úÖ –ü–æ–Ω–∏–∂–µ–Ω –¥–æ {prev_rank}.")
        else:
            await message.reply("‚ùå –ù–µ–ª—å–∑—è –ø–æ–Ω–∏–∑–∏—Ç—å.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–º–∞—Ç-—Ñ–∏–ª—å—Ç—Ä + –º–∏–Ω–∏-–∏–≥—Ä—ã)
@router.message(F.text)
async def message_handler(message: types.Message):
    text = message.text.lower()
    user = message.from_user

    if any(bad_word in text for bad_word in bad_words):
        await message.delete()
        warns[user.id] = warns.get(user.id, 0) + 1
        await message.answer(f"üö´ –ú–∞—Ç! –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: {warns[user.id]}")
        if warns[user.id] >= 3:
            warns[user.id] = 0
            await bot.restrict_chat_member(
                message.chat.id,
                user.id,
                permissions=ChatPermissions(can_send_messages=False),
                until_date=datetime.now() + timedelta(minutes=30)
            )
            await message.answer(f"‚è∞ {user.first_name} –∑–∞–º—å—é—á–µ–Ω –Ω–∞ 30 –º–∏–Ω—É—Ç –∑–∞ 3 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è.")
        return

    if "!–¥—É—ç–ª—å" in text:
        admins = await bot.get_chat_administrators(message.chat.id)
        names = [admin.user.first_name for admin in admins]
        if len(names) >= 2:
            await message.reply(f"‚öîÔ∏è –ü–æ–±–µ–¥–∏–ª: {random.choice(names)}")
    elif "!–∫—Ç–æ–∫—Ç–æ" in text:
        await message.reply(f"ü§î –≠—Ç–æ —Ç–æ—á–Ω–æ {user.first_name}!")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
